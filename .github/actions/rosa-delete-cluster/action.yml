name: Delete ROSA HCP Cluster

description: |
  This GitHub Action automates the deletion of a ROSA (Red Hat OpenShift Service on AWS) cluster using Terraform.
  This action will also uninstall oc, awscli, rosa cli.

inputs:
  rh-token:
    description: 'Red Hat Hybrid Cloud Console Token'
    required: true
  cluster-name:
    description: 'Name of the ROSA cluster to delete'
    required: true
  aws-region:
    description: 'AWS region where the ROSA cluster is deployed'
    required: true
  s3-backend-bucket:
    description: 'Name of the S3 bucket where the Terraform state is stored'
    required: true
  awscli-version:
    description: 'Version of the aws cli to use'
    required: true
    default: "1.32.105"
  tf-modules-revision:
    description: 'Git revision of the tf modules to use'
    default: 'main'
    required: true
  tf-modules-path:
    description: 'Path where the tf rosa modules will be cloned'
    default: './.action-tf-modules/rosa/'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Set Terraform variables
      shell: bash
      id: set-terraform-variables
      run: |
        export TFSTATE_BUCKET="${{ inputs.s3-backend-bucket }}"
        export TFSTATE_REGION="${{ inputs.aws-region }}"
        export TFSTATE_KEY="tfstate-${{ inputs.cluster-name }}/${{ inputs.cluster-name }}.tfstate"
        echo "TFSTATE_BUCKET=${TFSTATE_BUCKET}" >> "$GITHUB_OUTPUT"
        echo "TFSTATE_REGION=${TFSTATE_REGION}" >> "$GITHUB_OUTPUT"
        echo "TFSTATE_KEY=${TFSTATE_KEY}" >> "$GITHUB_OUTPUT"

    - name: Checkout Repository rosa modules
      uses: actions/checkout@v4
      with:
        repository: "https://github.com/camunda/camunda-tf-rosa.git"
        ref: ${{ inputs.tf-modules-revision }}
        path: ${{ inputs.tf-modules-path }}

    - name: Terraform Init
      shell: bash
      id: init
      working-directory: "${{ inputs.tf-modules-path }}/modules/rosa-hcp/"
      run: |
        terraform init -backend-config="bucket=${{ steps.set-terraform-variables.outputs.TFSTATE_BUCKET }}" -backend-config="key=${{ steps.set-terraform-variables.outputs.TFSTATE_KEY }}" -backend-config="region=${{ steps.set-terraform-variables.outputs.TFSTATE_REGION }}"
        terraform validate -no-color

    - name: Terraform Plan Destroy
      shell: bash
      id: plan-destroy
      working-directory: "${{ inputs.tf-modules-path }}/modules/rosa-hcp/"
      run: |
        terraform plan -destroy -no-color -out rosa-destroy.plan -var "cluster_name=${{ inputs.cluster-name }}" -var "offline_access_token=${{ inputs.rh-token }}" -var "htpasswd_password=dUmmyPassword$123!"

    - name: Terraform Apply Destroy
      shell: bash
      id: apply-destroy
      working-directory: "${{ inputs.tf-modules-path }}/modules/rosa-hcp/"
      run: |
        terraform apply -destroy -no-color rosa-destroy.plan
